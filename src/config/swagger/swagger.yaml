openapi: 3.0.0
info:
  title: DTU Times API
  description: DTU Times Backend API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local server
  - url: http://domain.com
    description: Production server


components:
  schemas:
    Error:
      schema:
        type: object
        properties:
          status:
            type: integer
            example: 401
          message:
            type: string
            example: No user exists with this email.

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Logs in user
      description: Creates access and refresh token after succesful login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  required: true
                  type: string
                  example: test@gmail.com
                password:
                  required: true
                  type: string
                  example: test
      responses:
        "200":
          description: Response body with access token and refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    example: "success"
                  message:
                    example: "User successfully login!"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAZ21haWwuY29tIiwidXNlcl9pZCI6IjY1M2JjMTJkZDUyMmMxNWU4ZTc3MGU0YiIsImlhdCI6MTcwNTQwNjE4NCwiZXhwIjoxNzA1NDkyNTg0fQ.K4dxUgmvMB-iy8pmTEZlejvdKiWuKXnGdOLouA4UDms
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlcjenfkefmlefef,snk229e292RAZ21haWwuY29tIhwIjoxNzA1NDkyNTg0fQ.KdxUgmvMB-iy8pmTEZlejvdKiWuKXnsdklfsklf92
                      user:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Test
                          email:
                            type: string
                            example: test@gmail.com
        "Other":
          content:
            application/json:
          schema:
            $ref: '#/components/schemas/Error'
  /user/create:
    post:
      tags: [User]
      summary: Create a user
      description: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  required: true
                  type: string
                  example: Sanyam Jain
      responses:
        "201": # status code
          description: User details which is created
        "Other":
          description: Appropriate error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: No user exists with this email.

  /user:
    get:
      tags: [User]
      summary: Get all users
      description: Get all users
      responses:
        "200": # status code
          description: Array of users
